---
http_interactions:
- request:
    method: get
    uri: https://www.rfc-editor.org/rfcatom.xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.rfc-editor.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Jan 2025 04:18:12 GMT
      Content-Type:
      - text/xml
      Content-Length:
      - '13991'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2025 20:34:52 GMT
      Etag:
      - '"36a7-62becd7c4797c-gzip"'
      Accept-Ranges:
      - bytes
      Vary:
      - Accept-Encoding
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 904c425ce9ce16a0-SJC
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n         <feed xmlns=\"http://www.w3.org/2005/Atom\">\n\t<title>Recent
        RFCs</title>\n\t<subtitle>Recently published RFCs</subtitle>\n\t<link href=\"https://www.rfc-editor.org/\"
        rel=\"self\"/><updated>2025-01-17T12:34:52-08:00</updated>\n\t<author>\n\t
        \   <name>RFC Editor</name>\n\t</author>\n\t<id>https://www.rfc-editor.org</id>\t\t\t<entry>\n\t\t<title>RFC
        9706: TreeDN: Tree-Based Content Delivery Network (CDN) for Live Streaming
        to Mass Audiences</title>\n\t\t<link type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9706\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9706</id>\n\n\t\t<updated>2025-01-17T00:00:00-08:00</updated>\n\t\t<summary>As
        Internet audience sizes for high-interest live events reach\r\nunprecedented
        levels and bitrates climb to support formats and\r\napplications such as 4K,
        8K, and  Augmented Reality (AR), live\r\nstreaming can place a unique type
        of stress upon network resources. \r\nTreeDN is a tree-based Content Delivery
        Network (CDN) architecture\r\ndesigned to address the distinctive scaling
        challenges of live\r\nstreaming to mass audiences. TreeDN enables operators
        to offer\r\nReplication-as-a-Service (RaaS) at a fraction of the cost of\r\ntraditional,
        unicast-based CDNs -- in some cases, at no additional\r\ncost to the infrastructure.
        \ In addition to efficiently utilizing\r\nnetwork resources to deliver existing
        multi-destination traffic, this\r\narchitecture also enables new types of
        content and use cases that\r\npreviously were not possible or economically
        viable using traditional\r\nCDN approaches.  Finally, TreeDN is a decentralized
        architecture and\r\na democratizing technology that makes content distribution
        more\r\naccessible to more people by dramatically reducing the costs of\r\nreplication.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9693: Benchmarking Methodology for Stateful NATxy Gateways</title>\n\t\t<link
        type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9693\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9693</id>\n\n\t\t<updated>2025-01-10T00:00:00-08:00</updated>\n\t\t<summary>RFC
        2544 defines a benchmarking methodology for network interconnect\r\ndevices.
        RFC 5180 addresses IPv6 specificities, and it also provides\r\na technology
        update but excludes IPv6 transition technologies. RFC\r\n8219 addresses IPv6
        transition technologies, including stateful\r\nNAT64. However, none of them
        discuss how to apply pseudorandom port\r\nnumbers from RFC 4814 to any stateful
        NATxy (such as NAT44, NAT64,\r\nand NAT66) technologies.  This document discusses
        why using\r\npseudorandom port numbers with stateful NATxy gateways is a difficult\r\nproblem.
        It recommends a solution that limits the port number ranges\r\nand uses two
        test phases (phase 1 and phase 2). This document shows\r\nhow the classic
        performance measurement procedures (e.g., throughput,\r\nframe loss rate,
        latency, etc.)  can be carried out.  New performance\r\nmetrics and measurement
        procedures are also defined for measuring the\r\nmaximum connection establishment
        rate, connection tear-down rate, and\r\nconnection tracking table capacity.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9702: YANG Data Model for Maximum Segment Identifier (SID) Depth (MSD) Types
        and MPLS MSD</title>\n\t\t<link type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9702\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9702</id>\n\n\t\t<updated>2025-01-10T00:00:00-08:00</updated>\n\t\t<summary>This
        document defines two YANG modules.  The first module is the\r\ninitial version
        of the IANA-maintained YANG module for Maximum\r\nSegment Identifier (SID)
        Depth (MSD) Types, which includes identities\r\nfor both the MPLS data plane
        and Segment Routing over IPv6 (SRv6)\r\ndata plane.  The second module augments
        the IETF MPLS YANG data model\r\nto provide support for MPLS MSDs as defined
        in RFCs 8476 and 8491.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9709: Encryption Key Derivation in the Cryptographic Message Syntax (CMS)
        Using HKDF with SHA-256</title>\n\t\t<link type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9709\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9709</id>\n\n\t\t<updated>2025-01-10T00:00:00-08:00</updated>\n\t\t<summary>This
        document specifies the derivation of the content-encryption key\r\nor the
        content-authenticated-encryption key in the Cryptographic\r\nMessage Syntax
        (CMS) using the HMAC-based Extract-and-Expand Key\r\nDerivation Function (HKDF)
        with SHA-256. The use of this mechanism\r\nprovides protection against an
        attacker that manipulates the\r\ncontent-encryption algorithm identifier or
        the\r\ncontent-authenticated-encryption algorithm identifier.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9708: Use of the HSS/LMS Hash-Based Signature Algorithm in the Cryptographic
        Message Syntax (CMS)</title>\n\t\t<link type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9708\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9708</id>\n\n\t\t<updated>2025-01-10T00:00:00-08:00</updated>\n\t\t<summary>This
        document specifies the conventions for using the Hierarchical\r\nSignature
        System (HSS) / Leighton-Micali Signature (LMS) hash-based\r\nsignature algorithm
        with the Cryptographic Message Syntax (CMS).  In\r\naddition, the algorithm
        identifier and public key syntax are\r\nprovided.  The HSS/LMS algorithm is
        one form of hash-based digital\r\nsignature; it is described in RFC 8554.
        \ This document obsoletes RFC\r\n8708.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9699: Use Case for an Extended Reality Application on Edge Computing Infrastructure</title>\n\t\t<link
        type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9699\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9699</id>\n\n\t\t<updated>2024-12-28T00:00:00-08:00</updated>\n\t\t<summary>This
        document explores the issues involved in the use of edge\r\ncomputing resources
        to operationalize a media use case that involves\r\nan Extended Reality (XR)
        application. In particular, this document\r\ndiscusses an XR application that
        can run on devices having different\r\nform factors (such as different physical
        sizes and shapes) and needs\r\nedge computing resources to mitigate the effect
        of problems such as\r\nthe need to support interactive communication requiring
        low latency,\r\nlimited battery power, and heat dissipation from those devices.
        \ This\r\ndocument also discusses the expected behavior of XR applications,\r\nwhich
        can be used to manage traffic, and the service requirements for\r\nXR applications
        to be able to run on the network. Network operators\r\nwho are interested
        in providing edge computing resources to\r\noperationalize the requirements
        of such applications are the intended\r\naudience for this document.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9703: Label Switched Path (LSP) Ping/Traceroute for Segment Routing (SR) Egress
        Peer Engineering (EPE) Segment Identifiers (SIDs) with MPLS Data Plane</title>\n\t\t<link
        type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9703\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9703</id>\n\n\t\t<updated>2024-12-28T00:00:00-08:00</updated>\n\t\t<summary>Egress
        Peer Engineering (EPE) is an application of Segment Routing\r\n(SR) that solves
        the problem of egress peer selection.  The SR-based\r\nBGP-EPE solution allows
        a centralized controller, e.g., a\r\nSoftware-Defined Network (SDN) controller,
        to program any egress\r\npeer. The EPE solution requires the node or the SDN
        controller to\r\nprogram 1) the PeerNode Segment Identifier (SID) describing
        a session\r\nbetween two nodes, 2) the PeerAdj SID describing the link or
        links\r\nthat are used by the sessions between peer nodes, and 3) the PeerSet\r\nSID
        describing any connected interface to any peer in the related\r\ngroup. This
        document provides new sub-TLVs for EPE-SIDs that are used\r\nin the Target
        FEC Stack TLV (Type 1) in MPLS Ping and Traceroute\r\nprocedures.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9672: Transferring Opportunistic Wireless Encryption to the IEEE 802.11 Working
        Group</title>\n\t\t<link type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9672\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9672</id>\n\n\t\t<updated>2024-12-28T00:00:00-08:00</updated>\n\t\t<summary>RFC
        8110 describes Opportunistic Wireless Encryption (OWE), a mode\r\nthat allows
        unauthenticated clients to connect to a network using\r\nencrypted traffic.
        This document transfers the ongoing maintenance\r\nand further development
        of the protocol to the IEEE 802.11 Working\r\nGroup.\r\n\r\nThis document
        updates RFC 8110 by noting that future work on the\r\nprotocol described therein
        will occur in the IEEE 802.11 Working\r\nGroup.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9679: CBOR Object Signing and Encryption (COSE) Key Thumbprint</title>\n\t\t<link
        type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9679\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9679</id>\n\n\t\t<updated>2024-12-20T00:00:00-08:00</updated>\n\t\t<summary>This
        specification defines a method for computing a hash value over a\r\nCBOR Object
        Signing and Encryption (COSE) Key. It specifies which\r\nfields within the
        COSE Key structure are included in the\r\ncryptographic hash computation,
        the process for creating a canonical\r\nrepresentation of these fields, and
        how to hash the resulting byte\r\nsequence. The resulting hash value, referred
        to as a &quot;thumbprint&quot;,\r\ncan be used to identify or select the corresponding
        key.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC 9639: Free Lossless
        Audio Codec (FLAC)</title>\n\t\t<link type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9639\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9639</id>\n\n\t\t<updated>2024-12-18T00:00:00-08:00</updated>\n\t\t<summary>This
        document defines the Free Lossless Audio Codec (FLAC) format and\r\nits streamable
        subset. FLAC is designed to reduce the amount of\r\ncomputer storage space
        needed to store digital audio signals. It does\r\nthis losslessly, i.e., it
        does so without losing information. FLAC is\r\nfree in the sense that its
        specification is open and its reference\r\nimplementation is open source.
        Compared to other lossless audio\r\ncoding formats, FLAC is a format with
        low complexity and can be\r\nencoded and decoded with little computing resources.
        Decoding of FLAC\r\nhas been implemented independently for many different
        platforms, and\r\nboth encoding and decoding can be implemented without needing\r\nfloating-point
        arithmetic.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC 9691: A
        Profile for Resource Public Key Infrastructure (RPKI) Trust Anchor Keys (TAKs)</title>\n\t\t<link
        type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9691\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9691</id>\n\n\t\t<updated>2024-12-18T00:00:00-08:00</updated>\n\t\t<summary>A
        Trust Anchor Locator (TAL) is used by Relying Parties (RPs) in the\r\nResource
        Public Key Infrastructure (RPKI) to locate and validate a\r\nTrust Anchor
        (TA) Certification Authority (CA) certificate used in\r\nRPKI validation.
        This document defines an RPKI signed object for a\r\nTrust Anchor Key (TAK).
        \ A TAK object can be used by a TA to signal\r\nto RPs the location(s) of
        the accompanying CA certificate for the\r\ncurrent public key, as well as
        the successor public key and the\r\nlocation(s) of its CA certificate. This
        object helps to support\r\nplanned key rollovers without impacting RPKI validation.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9610: JSON Meta Application Protocol (JMAP) for Contacts</title>\n\t\t<link
        type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9610\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9610</id>\n\n\t\t<updated>2024-12-18T00:00:00-08:00</updated>\n\t\t<summary>This
        document specifies a data model for synchronising contact data\r\nwith a server
        using the JSON Meta Application Protocol (JMAP).</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9697: Detecting RPKI Repository Delta Protocol (RRDP) Session Desynchronization</title>\n\t\t<link
        type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9697\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9697</id>\n\n\t\t<updated>2024-12-13T00:00:00-08:00</updated>\n\t\t<summary>This
        document describes an approach for Resource Public Key\r\nInfrastructure (RPKI)
        Relying Parties to detect a particular form of\r\nRPKI Repository Delta Protocol
        (RRDP) session desynchronization and\r\nhow to recover. This document updates
        RFC 8182.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC 9683: Remote
        Integrity Verification of Network Devices Containing Trusted Platform Modules</title>\n\t\t<link
        type=\"text/html\" href=\"https://www.rfc-editor.org/info/rfc9683\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9683</id>\n\n\t\t<updated>2024-12-06T00:00:00-08:00</updated>\n\t\t<summary>This
        document describes a workflow for remote attestation of the\r\nintegrity of
        firmware and software installed on network devices that\r\ncontain Trusted
        Platform Modules (TPMs), as defined by the Trusted\r\nComputing Group (TCG),
        or equivalent hardware implementations that\r\ninclude the protected capabilities,
        as provided by TPMs.</summary>\n\t</entry>\r\n\t\t\t<entry>\n\t\t<title>RFC
        9684: A YANG Data Model for Challenge-Response-Based Remote Attestation (CHARRA)
        Procedures Using Trusted Platform Modules (TPMs)</title>\n\t\t<link type=\"text/html\"
        href=\"https://www.rfc-editor.org/info/rfc9684\"/>\n\t\t<id>https://www.rfc-editor.org/info/rfc9684</id>\n\n\t\t<updated>2024-12-06T00:00:00-08:00</updated>\n\t\t<summary>This
        document defines the YANG Remote Procedure Calls (RPCs) and\r\nconfiguration
        nodes that are required to retrieve attestation\r\nevidence about integrity
        measurements from a device, following the\r\noperational context defined in
        RFC 9683 &quot;TPM-based Network Device\r\nRemote Integrity Verification&quot;.
        Complementary measurement logs\r\noriginating from one or more Roots of Trust
        for Measurement (RTMs)\r\nare also provided by the YANG RPCs.  The defined
        module requires the\r\ninclusion of the following in the device components
        of the composite\r\ndevice on which the YANG server is running: at least one
        Trusted\r\nPlatform Module (TPM) of either version 1.2 or 2.0 as well as a\r\ncorresponding
        TPM Software Stack (TSS), or an equivalent hardware\r\nimplementation that
        includes the protected capabilities as provided\r\nby TPMs as well as a corresponding
        software stack.</summary>\n\t</entry>\r\n\t\t</feed>"
  recorded_at: Mon, 20 Jan 2025 04:18:12 GMT
- request:
    method: get
    uri: https://www.rfc-editor.org/rfc/rfc9706.txt
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.rfc-editor.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Jan 2025 04:18:12 GMT
      Content-Type:
      - text/plain; charset=utf-8
      Content-Length:
      - '39869'
      Connection:
      - keep-alive
      Last-Modified:
      - Fri, 17 Jan 2025 20:29:25 GMT
      Etag:
      - '"9bbd-62becc445ae88-gzip"'
      Vary:
      - Accept-Encoding
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      Cache-Control:
      - max-age=1200
      Cf-Cache-Status:
      - HIT
      Age:
      - '976'
      Accept-Ranges:
      - bytes
      Server:
      - cloudflare
      Cf-Ray:
      - 904c425eaab9cf21-SJC
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 20 Jan 2025 04:18:12 GMT
recorded_with: VCR 6.3.1
